var EPSILON = .001;

var beta_2_1_ps = [0, 0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.2, 0.22, 0.24, 0.26, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.52, 0.54, 0.56, 0.58, 0.6, 0.62, 0.64, 0.66, 0.68, 0.7, 0.72, 0.74, 0.76, 0.78, 0.8, 0.82, 0.84, 0.86, 0.88, 0.9, 0.92, 0.94, 0.96, 0.98, 1, 1.02, 1.04, 1.06, 1.08, 1.1, 1.12, 1.14, 1.16, 1.18, 1.2, 1.22, 1.24, 1.26, 1.28, 1.3, 1.32, 1.34, 1.36, 1.38, 1.4, 1.42, 1.44, 1.46, 1.48, 1.5, 1.52, 1.54, 1.56, 1.58, 1.6, 1.62, 1.64, 1.66, 1.68, 1.7, 1.72, 1.74, 1.76, 1.78, 1.8, 1.82, 1.84, 1.86, 1.88, 1.9, 1.92, 1.94, 1.96, 1.98, 2]
var beta_2_1_vs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
var beta_2_2_ps = [0, 0.0594, 0.1176, 0.1746, 0.2304, 0.285, 0.3384, 0.3906, 0.4416, 0.4914, 0.54, 0.5874, 0.6336, 0.6786, 0.7224, 0.765, 0.8064, 0.8466, 0.8856, 0.9234, 0.96, 0.9954, 1.0296, 1.0626, 1.0944, 1.125, 1.1544, 1.1826, 1.2096, 1.2354, 1.26, 1.2834, 1.3056, 1.3266, 1.3464, 1.365, 1.3824, 1.3986, 1.4136, 1.4274, 1.44, 1.4514, 1.4616, 1.4706, 1.4784, 1.485, 1.4904, 1.4946, 1.4976, 1.4994, 1.5, 1.4994, 1.4976, 1.4946, 1.4904, 1.485, 1.4784, 1.4706, 1.4616, 1.4514, 1.44, 1.4274, 1.4136, 1.3986, 1.3824, 1.365, 1.3464, 1.3266, 1.3056, 1.2834, 1.26, 1.2354, 1.2096, 1.1826, 1.1544, 1.125, 1.0944, 1.0626, 1.0296, 0.9954, 0.96, 0.9234, 0.8856, 0.8466, 0.8064, 0.765, 0.7224, 0.6786, 0.6336, 0.5874, 0.54, 0.4914, 0.4416, 0.3906, 0.3384, 0.285, 0.2304, 0.1746, 0.1176, 0.0594, 0]
var beta_2_2_vs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]


// set of utterances
var utterances = ["toma", "red toma", "blue toma"]

var contrastObjects = [{color: "red", shape: "toma", string: "red toma"},
              {color: "blue", shape: "toma", string: "blue toma"}]
var contrastUtterances = ["toma", "red toma", "blue toma"]

var contrastWorlds = [{
  objects: contrastObjects,
  utterances: contrastUtterances,
  string: "target world"
}]

var sameObjects1 = [{color: "red", shape: "toma", string: "red toma"},
               {color: "red", shape: "dax", string: "red dax"}]

var sameObjects2 = [{color: "red", shape: "dax", string: "red dax"},
                    {color: "red", shape: "toma", string: "red toma"}]

var sameUtterances = ["toma", "dax", "red toma", "red dax"]

var sameWorlds = [{
  objects: sameObjects1,
  utterances: sameUtterances,
  string: "target world"
}, {
  objects: sameObjects2,
  utterances: sameUtterances,
  string: "lure world"
}]

var differentObjects1 = [{color: "red", shape: "toma", string: "red toma"},
              {color: "blue", shape: "dax", string: "blue dax"}]

var differentObjects2 = [{color: "red", shape: "dax", string: "red dax"},
              {color: "blue", shape: "toma", string: "blue toma"}]

var differentUtterances1 = ["toma", "dax", "red toma", "blue dax"]
var differentUtterances2 = ["toma", "dax", "blue toma", "red dax"]

var differentWorlds = [{
  objects: differentObjects1,
  utterances: differentUtterances1,
  string: "target world"
}, {
  objects: differentObjects2,
  utterances: differentUtterances2,
  string: "lure world"
}]

var red_target = function(p) {
  Bernoulli({p: p}).score(true)
}

// prior over world states
var worldsPrior = function(worlds) {
  var world = uniformDraw(worlds)
  return world
}

// prior over object states
var objectPrior = function(objects) {
  var obj = uniformDraw(objects)
  return obj.string
}

// meaning function to interpret the utterances
var meaning = function(utterance, obj){
  _.includes(obj, utterance)
}

//typicality
var typicality = function(obj, utterance, p) {
   if(obj == utterance) {
    return Math.log(1)
   }

   else if(_.includes(obj, "red") && _.includes(utterance, "blue") ||
           _.includes(obj, "blue") && _.includes(utterance, "red") ||
           _.includes(obj, "dax") && _.includes(utterance, "toma") ||
           _.includes(obj, "toma") && _.includes(utterance, "dax")
         ) {

      return Math.log(EPSILON)
   }

   else if(_.includes(obj, "red")) {
    return red_target(p)
  }

   else {
    return red_target(1 - p)
  }

}

// literal listener
var literalListener = function(world, utterance){
  Infer({model: function(){
    var obj = objectPrior(world.objects);
    condition(meaning(utterance, obj))
    return obj
  }})
}

// utterance prior
var utterancePrior = function(utterances) {
  var utterance = uniformDraw(utterances)
  return utterance
}

//cost is number of words
var cost = function(utterance) {
 return Math.log(utterance.split(" ").length + 1)
 //return 0
}

// pragmatic speaker
var pragmaticSpeaker = function(world, obj, alpha, p){
  Infer({model: function(){
    var utterance = uniformDraw(world.utterances)
    factor(alpha * (literalListener(world, utterance).score(obj) -
      cost(utterance) + typicality(obj, utterance, p)))
    return utterance
  }})
}

// pragmatic listener
var pragmaticListener = function(alpha, utterance, worlds){
  Infer({model: function(){
    // var world = _.first(_.filter(worlds, ['string', 'target world']))
    // var obj = _.first(_.filter(world.objects, ['string', 'red toma']))

    var world = uniformDraw(worlds)
    var obj = uniformDraw(world.objects)

    var a = 2
    var b = ((world.string == "target world") && _.includes(obj, "toma") ||
             (world.string == "distractor world") && _.includes(obj, "dax")) ? 2 : 1

    var dist = b == 2 ? Categorical({ps: beta_2_2_ps, vs: beta_2_2_vs}) :
      Categorical({ps: beta_2_1_ps, vs: beta_2_1_vs})

    var p = sample(dist)

    observe(pragmaticSpeaker(world, obj.string, alpha, p/100), utterance)
    return {world: world, obj: obj, p: p}
  }})
}

var alphaPrior = Gamma({shape: 1, scale: 1})

var gaussianKernel = function(prevVal) {
  return Gaussian({mu: prevVal, sigma: .5});
};



var modelPosterior = function() {
  Infer({method: "MCMC", samples: 1000, burn: 200, verbose: true,
    model() {

      var alpha = sample(alphaPrior)

      var posterior_same_toma = pragmaticListener(alpha, "toma", sameWorlds)
      var posterior_same_red_toma= pragmaticListener(alpha, "red toma", sameWorlds)

      var posterior_different_toma = pragmaticListener(alpha, "toma", differentWorlds)
      var posterior_different_red_toma = pragmaticListener(alpha, "red toma", differentWorlds)

      var posterior_contrast_toma = pragmaticListener(alpha, "toma", contrastWorlds)
      var posterior_contrast_red_toma = pragmaticListener(alpha, "red toma", contrastWorlds)

      var get_score = function(x) {
        if(x.searchtype == "same") {
          var target_world = _.first(_.filter(sameWorlds, ['string', 'target world']))
          var target_obj = _.first(_.filter(target_world.objects, ['string', 'red toma']))
          x.utt == "toma" ?
              posterior_same_toma.score({"world": target_world, "obj": target_obj, "p": x.p}) :
              posterior_same_red_toma.score({"world": target_world, "obj": target_obj, "p": x.p});
        } else if(x.searchtype == "different"){
          var target_world = _.first(_.filter(differentWorlds, ['string', 'target world']))
          var target_obj = _.first(_.filter(target_world.objects, ['string', 'red toma']))
          x.utt == "toma" ?
              posterior_different_toma.score({"world": target_world, "obj": target_obj, "p": x.p}) :
              posterior_different_red_toma.score({"world": target_world, "obj": target_obj, "p": x.p});
        } else {
          var target_world = _.first(_.filter(contrastWorlds, ['string', 'target world']))
          var target_obj = _.first(_.filter(target_world.objects, ['string', 'red toma']))
          x.utt == "toma" ?
              posterior_contrast_toma.score({"world": target_world, "obj": target_obj, "p": x.p}) :
              posterior_contrast_red_toma.score({"world": target_world, "obj": target_obj, "p": x.p});
        }
      }

      var newScore = map(get_score, empiricalData)

      //console.log(newScore)

      factor(_.sum(newScore))

      return alpha
    }
  })
}

modelPosterior()
